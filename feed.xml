<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://dirtmelon.github.io/</id><title>Dirtmelon</title><subtitle></subtitle> <updated>2021-07-17T19:19:50+08:00</updated> <author> <name>dirtmelon</name> <uri>https://dirtmelon.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://dirtmelon.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://dirtmelon.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 dirtmelon </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Objective-C Direct Methods</title><link href="https://dirtmelon.github.io/posts/objective-c-direct-methods/" rel="alternate" type="text/html" title="Objective-C Direct Methods" /><published>2021-06-22T23:54:00+08:00</published> <updated>2021-06-22T23:54:00+08:00</updated> <id>https://dirtmelon.github.io/posts/objective-c-direct-methods/</id> <content src="https://dirtmelon.github.io/posts/objective-c-direct-methods/" /> <author> <name>dirtmelon</name> </author> <summary> Objective-C Direct Methods Clang 13 documentation commit : Implement attribute((objc_direct)), attribute((objc_direct_me… · llvm/llvm-project@d4e1ba3 Clang 13 新增了 objc_direct 声明，对应的 Xcode 版本为 12 。使用 objc_direct 标记的 Objective-C 方法为直接派发方法。 direct 方法在调用时类似于静态方法，降低了一定的性能损耗，但是也牺牲了 Objective-C 的一些特性。 direct 方法的消息发送会像 C 函数那样直接调用实现，没有走 Objective-C 的消息发送流程。这里速度会比较快和有可能进行函数内联，这同时意味着方法不能够被重写或者动态替换。因此... </summary> </entry> <entry><title>一种使用 CocoaPods 同步 Git hooks 的方案</title><link href="https://dirtmelon.github.io/posts/cocoapods-sync-githooks/" rel="alternate" type="text/html" title="一种使用 CocoaPods 同步 Git hooks 的方案" /><published>2021-05-23T21:19:00+08:00</published> <updated>2021-05-23T21:27:06+08:00</updated> <id>https://dirtmelon.github.io/posts/cocoapods-sync-githooks/</id> <content src="https://dirtmelon.github.io/posts/cocoapods-sync-githooks/" /> <author> <name>dirtmelon</name> </author> <category term="Code" /> <category term="Ruby" /> <summary> Git hooks 是什么 Git hooks 是一段脚本，可以在 Git 执行某些操作之前或者之后执行，比如说 commit ， push 或者 receive 。随便打开某个 Git 项目的目录，可以在 .git/hooks 这个目录下看到 Git hooks 的示例代码，不过都是以 .sample 后缀结尾，需要把 .sample 去掉后才会生效。 Git hooks 可以使用多种语言编写，包括 Shell ， Ruby ， Perl 和 Python 等。如果想要跳过 Git hooks 的检查，可以在执行 Git 命令时添加 —no-verify 参数，那么就算 Git hooks 失败，命令也会继续执行。但是必须要清楚明白跳过 Git hooks 的后果。 Git hooks 作用 Git-SCM Git - Git Hooks 详细说明了各种 hooks 的类型，... </summary> </entry> <entry><title>CocoaPods 学习记录 - 官方文档</title><link href="https://dirtmelon.github.io/posts/cocoapods-first/" rel="alternate" type="text/html" title="CocoaPods 学习记录 - 官方文档" /><published>2021-03-13T18:12:00+08:00</published> <updated>2021-04-06T00:19:52+08:00</updated> <id>https://dirtmelon.github.io/posts/cocoapods-first/</id> <content src="https://dirtmelon.github.io/posts/cocoapods-first/" /> <author> <name>dirtmelon</name> </author> <category term="Code" /> <category term="Ruby" /> <summary> CocoaPods 的官方文档写得比较详细，建议都过一遍，以免用错方法和漏掉一些可以提高效率的小技巧。 pod install vs pod update CocoaPods Guides - pod install vs. pod update 很多人都认为只有在第一次配置 CocoaPods 时才使用 pod install ，后面都是使用 pod update ，然而事实并非如此。 TL;DR: 使用 pod install 来下载新的 pods ，即使你已经有 Podfile 且之前已经执行过 pod install 。就算只是给已使用 CocoaPods 的项目添加或者移除 pods ，也是执行 pod install ； 当你想要更新 pods 至一个更新的版本时，执行 pod update [PODNAME] 。 pod install ： ... </summary> </entry> <entry><title>IGListKit - 完结篇</title><link href="https://dirtmelon.github.io/posts/iglistkit-fifth/" rel="alternate" type="text/html" title="IGListKit - 完结篇" /><published>2021-02-19T14:52:00+08:00</published> <updated>2021-02-19T14:52:00+08:00</updated> <id>https://dirtmelon.github.io/posts/iglistkit-fifth/</id> <content src="https://dirtmelon.github.io/posts/iglistkit-fifth/" /> <author> <name>dirtmelon</name> </author> <category term="Code" /> <category term="Objective-C" /> <summary> IGListCollectionViewLayout IGListCollectionViewLayout 其实不太算得上是 IGListKIt 的内容，它主要作用是提供一个可变宽度和高度的流式布局。看下来发现这块写得太好了，从里面可以学到很多如何高效编写一个自定义的 UICollectionViewLayout 的相关技巧。 IGListCollectionViewLayout 提供了一些常用的 static 的方法，用于在计算布局时根据滑动方向获取不同的属性，其中一个例子如下： static CGFloat UIEdgeInsetsLeadingInsetInDirection(UIEdgeInsets insets, UICollectionViewScrollDirection direction) { switch (direction) { ... </summary> </entry> <entry><title>IGListKit 的数据处理 - Updater&amp;Diff</title><link href="https://dirtmelon.github.io/posts/iglistkit-fourth/" rel="alternate" type="text/html" title="IGListKit 的数据处理 - Updater&amp;Diff" /><published>2021-01-02T17:30:00+08:00</published> <updated>2021-01-02T17:30:00+08:00</updated> <id>https://dirtmelon.github.io/posts/iglistkit-fourth/</id> <content src="https://dirtmelon.github.io/posts/iglistkit-fourth/" /> <author> <name>dirtmelon</name> </author> <category term="Code" /> <category term="Objective-C" /> <summary> IGListAdapterUpdater 在初始化 IGListAdapter 时提供了一个 id&amp;lt;IGListUpdatingDelegate&amp;gt; updater 参数，调用者可以自己自定义一个支持 IGListUpdatingDelegate 协议的类，来实现 IGListUpdatingDelegate 的方法。 IGListAdapter 在更新 UICollectionView 和数据源时都是通过 updater 来进行操作， IGListKit 为我们提供了一个默认的 updater ： IGListAdapterUpdater ， IGListAdapter 支持 UICollectionView 的局部更新操作。 // 当更新逻辑执行完成时调用的 `block` ， `finished` 表示更新是否完成。 typedef void (^IGListUp... </summary> </entry> </feed>
